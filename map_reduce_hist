library("bmp");
library("pixmap");
library(rJava);

write_to_files <- function(vector, block_size){
	blocks=as.array(split(vector, 1:block_size));
	print(length(blocks));
	for(j in 1:length(blocks)){
		name=get_name(j);;
		write.table(blocks[j], name);
	}
	
}

dir="out"; # not used now
filaname="output";

get_name <- function(number){
	name <- paste("out/output", "#",number, ".csv", sep="");
	return (name);
}


#method reads from file vector and returns it
#assumed that previously vector(s) was(were) written by write_to_files method
#or with write.table basic method of r
read_block <- function(file){

	block<-as.matrix(as.vector(read.table(file)));
	return (block);
}

#method maps a single block of data read from file
#assumed that firstly it was written by write_to_files
#and than read by read_block
handle_block <- function(block){
	print(block);
	res<-matrix(nrow=length(block), ncol=2);
	for(i in 1:length(block)){
		print(i);
		res[i,1]<-block[i];
		res[i,2]<- length(block[block==i]);
	}
	return (res);
}

map_block <- function (block){
	#print("map block");	;
	block2 <- as.integer(block);
	map <- RMethods$mapBlock(block2);
	#print(length(map$key));
	res <- matrix(nrow=length(map$key), ncol=2);
	res[,1] <- map$key;
	res[,2] <- map$value;
	return (res);
}

#method merges block2 to block1
#order of calls
#write_to_files -> read_blocks -> handle_block
merge_block <- function(block1, block2){
	result <- RMethods$mergeMaps(block1[,1],block1[,2],block2[,1],block2[,2]);
	#print(nrow(block1));
	#print(length(result$key));
	#print(length(result$value));
	block <- matrix(nrow=length(result$key), ncol=2);
	block[,1] <- result$key;
	block[,2] <- result$value;
	return (block);
}

args <- commandArgs(trailingOnly=TRUE);
pic_size<-as.numeric(args[1]);

class_path="/media/artem/385BE95714C3BE20/IdeaProjects/Custom/out/production/srw";
.jinit();
.jaddClassPath(class_path);
RMethods <- J("lian/artyom/RMethods");
instance <- .jnew("lian/artyom/RMethods");

bmp_file <- read.bmp("pic/test8bit.bmp");
#bmp_file <- read.bmp("pic/tes.png");
rgb_map <- pixmapRGB(bmp_file);
#hist(rgb_map@red); # color map
#hist(rgb_map@blue);
#hist(rgb_map@green);
levels_map <- pixmapGrey(bmp_file);
#hist(levels_map@grey);

#write_to_files(bmp_file, pic_size);
#block <- read_block("output 20 # .csv");
#block2 <- read_block("output 1 # .csv");
#b1<-handle_block(block);
#b2<-handle_block(block2);

initial_block <- read_block(get_name(1));
init_block_size <- length(initial_block);
#print(length(initial_block));
#print(pic_size);
blocks <- matrix(nrow = length(initial_block), ncol=pic_size);
print("reding files");
for(i in 1:pic_size){
	print(i);
	#print(length(read_block(get_name(i))));
	v <- read_block(get_name(i));
	#blocks[,i] <- c(v, numeric(init_block_size-length(v)));
	#print(length(v));
	blocks[,i]<-v;
}

#first_block  <- handle_block(initial_block);
first_block <- map_block(initial_block);

for(i in 1:pic_size){
	#print(i);
	#first_block <- merge_block(first_block, handle_block(blocks[,i]));
	first_block <- merge_block(first_block, map_block(blocks[,i]));
}
write.table(first_block, "output.txt");
jpeg(filename="plot.jpeg", width=1600, height=1600);
plot(first_block[,1], first_block[,2], type="h");
dev.off();
jpeg(filename="hist.jpeg", width=1600, height=1600);
hist(first_block[,2]);
dev.off();
