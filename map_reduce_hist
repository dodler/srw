library("bmp");
library("pixmap");

write_to_files <- function(vector, block_size){
	blocks=as.array(split(vector, 1:block_size));
	print(length(blocks));
	for(j in 1:length(blocks)){
		name=get_name(j);;
		write.table(blocks[j], name);
	}
	
}

get_name <- function(number){
	name <- paste("output", "#",number, ".csv");
	return (name);
}


#method reads from file vector and returns it
#assumed that previously vector(s) was(were) written by write_to_files method
#or with write.table basic method of r
read_block <- function(file){

	block<-as.matrix(as.vector(read.table(file)));
	return (block);
}

#method maps a single block of data read from file
#assumed that firstly it was written by write_to_files
#and than read by read_block
handle_block <- function(block){
	print("handle_block");
	min_value<- min(block);
	max_value<- max(block);
	print(min_value);
	print(max_value);
	res<-matrix(nrow=length(block), ncol=2);
	print(nrow(res));
	print("matrix created");
	for(i in 1:length(block)){
		print(i);
		res[i,1]<-block[i];
		res[i,2]<- length(block[block==i]);
	}
	print("returing value");
	return (res);
}

map_block <- function (block){
	print("map block");	
	print(typeof(block));
	#block[is.na(block)] <- 0;
	#print(block[is.na(block)]);
	res <- matrix(nrow=length(block), ncol=2);
	#RMethods$mapBlock(integer(10));
	map <- RMethods$mapBlock(block);
	res[,1] <- map$key;
	res[,2] <- map$result;
	return (res);
}

#method merges block2 to block1
#order of calls
#write_to_files -> read_blocks -> handle_block
merge_block <- function(block1, block2){
#	print("merge_block");
#	print("inp types");
#	print(typeof(block1));
#	print(typeof(block2));
#	print(block1);

	result <- RMethods$mergeMaps(block1[,1],block1[,2],block2[,1],block2[,2]);
	block <- matrix(nrow=nrow(block1), ncol=ncol(block1));
	block[,1] <- result$key;
	block[,2] <- result$value;
	return (block);
}


pic_size<-15;

library(rJava);

class_path="/media/artem/385BE95714C3BE20/IdeaProjects/Custom/out/production/srw";
.jinit();
.jaddClassPath(class_path);
RMethods <- J("lian/artyom/RMethods");
instance <- .jnew("lian/artyom/RMethods");

bmp_file <- read.bmp("pic/test.bmp");
#bmp_file <- read.bmp("pic/tes.png");
rgb_map <- pixmapRGB(bmp_file);
#hist(rgb_map@red); # color map
#hist(rgb_map@blue);
#hist(rgb_map@green);
levels_map <- pixmapGrey(bmp_file);
#hist(levels_map@grey);

#write_to_files(bmp_file, pic_size);
#block <- read_block("output 20 # .csv");
#block2 <- read_block("output 1 # .csv");
#b1<-handle_block(block);
#b2<-handle_block(block2);

initial_block <- read_block(get_name(1));
init_block_size <- length(initial_block);
#print(length(initial_block));
#print(pic_size);
blocks <- matrix(nrow = length(initial_block), ncol=pic_size);
print("reding files");
for(i in 1:pic_size){
	print(i);
	#print(length(read_block(get_name(i))));
	v <- read_block(get_name(i));
	blocks[,i] <- c(v, numeric(init_block_size-length(v)));
	#blocks[is.na(blocks)] <- 0;
}

#first_block  <- handle_block(initial_block);
first_block <- map_block(initial_block);
print(nrow(first_block));
print(ncol(first_block));

for(i in 1:pic_size){
	print(i);
	#first_block <- merge_block(first_block, handle_block(blocks[,i]));
	first_block <- merge_block(first_block, map_block(block[,i]));
}
#print(first_block);
plot(first_block[,1], first_block[,2]);
hist(first_block[,2]);
#merge_block(b1, b2);
